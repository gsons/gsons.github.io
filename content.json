[{"title":"demo","date":"2017-01-21T09:39:56.000Z","path":"2017/01/21/demo/","text":"","tags":[]},{"title":"","date":"2017-01-21T09:23:08.078Z","path":"2017/01/21/php递归/","text":"什么叫递归？ 举一个通俗的例子： 有一个8俩重的苹果要你切成重量相等的若干份，每一份的重量不能大于1俩。 你肯定会想到这样做： 第一刀先把一个苹果切成重量均等的2份A1和A2； 再把其中的一份A1切成重量均等的两份A11和A12， 把A2切成均等的两份A21和A22； 把A11切成均等的两份…… 直到每一小份都小于等于1俩为止。 以上的例子就是递归一个模型，把一个大的事物化成若干个小的事物，每一次使用的方法都相同。 程序自身调用自身的编程技巧称为递归（ recursion）。递归有直接递归和间接递归直接递归：函数在执行过程中调用本身。间接递归：函数在执行过程中调用其它函数再经过这些函数调用本身。递归有四个特性： 必须有可最终达到的终止条件，否则程序将陷入无穷循环； 子问题在规模上比原问题小，或更接近终止条件； 子问题可通过再次递归调用求解或因满足终止条件而直接求解； 子问题的解应能组合为整个问题的解。 上面的例子中也满足以上的四点性质： 终止条件是每一份的重量不能大于1俩； 每一次切的大小都比上一次小； 每一次切的方式都相同，所以子问题可递归调用； 最终切成的每一小份也就是要求的解。 1234567891011 &lt;?phpfunction cutApple($w,$t)&#123; if($w&lt;1)&#123; echo \"已经切完了\"; &#125; else&#123; echo \"第\".$t.\"次切割,每份重量是:\".($w/2).\"&lt;br&gt;\"; $t+=1; cutApple($w/2,$t); &#125;&#125; 结果: 第1次切割,每份重量是:7.5第2次切割,每份重量是:3.75第3次切割,每份重量是:1.875第4次切割,每份重量是:0.9375已经切完了 ####再举一个通俗的例子： 试求等差数列的和:1+2+3+4+…+98+100;123456789101112131415/** * 等差数列求和 * @param [int] $n [第一个数] * @param [int] $m [第二个数] */function add($n,$m)&#123; if(!is_int($n)||!is_int($m)) return false; static $sum=0; $sum+=$n; $n++; if($n&gt;$m) return $sum; return add($n,$m);&#125;echo add(1,100);","tags":[]},{"title":"Hello World","date":"2017-01-21T03:50:54.902Z","path":"2017/01/21/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]